<?php

namespace App\Entity;

use App\Repository\UserRepository;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

use Symfony\Component\Serializer\Annotation\Ignore;
use Symfony\Component\Serializer\Annotation\Groups;

/**
 * @ORM\Entity(repositoryClass=UserRepository::class)
 */
class User
{
    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * @ORM\Column(type="string", length=30)
     */
    #[Groups(['user_list'])]
    private $firstName;

    /**
     * @ORM\Column(type="string", length=60)
     */
    #[Groups(['user_list'])]
    private $lastName;

    /**
     * @ORM\Column(type="string", length=255)
     */
    #[Assert\Email()]
    #[Groups(['user_list'])]
    private $email;

    /**
     * @ORM\Column(type="string", length=15, nullable=true)
     */
    #[Assert\Regex("/^\d{10,10}$/", message:"your phone {{ value }} is invalid")]
    private $phone;

    /**
     * @ORM\Column(type="string", length=255)
     */
    #[Ignore()]
    private $password;

    #[Groups(['relation'])]
    private $reviews = [];

    /**
     * @ORM\OneToOne(targetEntity=ApiUser::class, mappedBy="user", cascade={"persist", "remove"})
     */
    private $apiUser;

    /**
     * @ORM\Column(type="json")
     */
    private $roles = [];


    public function getId(): ?int
    {
        return $this->id;
    }

    public function getRoles(): array
    {
        $roles = $this->roles;
        // guarantee every user at least has ROLE_USER
        $roles[] = 'ROLE_USER';

        return array_unique($roles);
    }

    public function setRoles(array $roles): self
    {
        $this->roles = $roles;

        return $this;
    }

    public function getFirstName(): ?string
    {
        return $this->firstName;
    }

    public function setFirstName(string $firstName): self
    {
        $this->firstName = $firstName;

        return $this;
    }

    #   [Assert\IsTrue()]
    public function isPhoneValid()
    {
        $ret = preg_match('/^\d{10,10}$/', $this->phone, $matches);

        dump($ret);

        return 1 === $ret;
    }

    public function getLastName(): ?string
    {
        return $this->lastName;
    }

    public function setLastName(string $lastName): self
    {
        $this->lastName = $lastName;

        return $this;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): self
    {
        $this->email = $email;

        return $this;
    }

    public function getPhone(): ?string
    {
        return $this->phone;
    }

    public function setPhone(?string $phone): self
    {
        $this->phone = $phone;

        return $this;
    }

    public function getPassword(): ?string
    {
        return $this->password;
    }

    public function setPassword(string $password): self
    {
        $this->password = $password;

        return $this;
    }

    public function getReviews()
    {
        return $this->reviews;
    }

    public function addReview(Review $review)
    {
        $this->reviews[] = $review;
    }

    public function getApiUser(): ?ApiUser
    {
        return $this->apiUser;
    }

    public function setApiUser(ApiUser $apiUser): self
    {
        // set the owning side of the relation if necessary
        if ($apiUser->getUser() !== $this) {
            $apiUser->setUser($this);
        }

        $this->apiUser = $apiUser;

        return $this;
    }
}

